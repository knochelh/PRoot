=========
 Roadmap
=========

Next minor
==========

* Make the de-translatation independant from the "bind-ness":

      $ proot -b /:/host-rootfs -b /tmp /usr/local/slack/install/slackware-13.37-d1/

      $ cd /usr
      $ ln -s /usr/bin/as
      $ ls -l as
      lrwxrwxrwx 1 1000 users 11 Apr  4 10:40 as -> /usr/bin/as

      $ cd /tmp
      $ ln -s /usr/bin/as
      $ ls -l as
      lrwxrwxrwx 1 1000 users 11 Apr  4 10:40 as -> /host-rootfs/usr/bin/as

* Investigate why the Slackware package installer can't execute the
  install-script::

      # installpkg perl-5.14.0-arm-2.tgz
      ...
      Executing install script for ...
      sh: /proc/self/fd/0: No such file or directory

* Fix the detranslation of "conflicting" host-side bindings.

  The detranslation isn't a state machine yet, hence it doesn't know
  how to detranslate correctly when there are several bindings with
  the same host-side::

      $ proot -w /a -m /tmp:/a -m /tmp:/b ../tests/rootfs /bin/pwd
      /b

      $ proot -w /a -m /tmp:/b -m /tmp:/a ../tests/rootfs /bin/pwd
      /a

* Make ``/proc/self/exe`` point to the original program name

    That was the prupose of the field ``exe`` in the structure
    ``tracee_info``

* Handle /proc/<pid>/(exe|cwd) where <pid> is a process traced by PRoot (i.e not only "self").


Next major
==========

* Rewrite the way paths are handled in PRoot (branch "opath").

    * Remove the use of PATH_MAX and ARG_MAX

    * Remove most of string copy.

* Emulate *at syscalls with non-*at equivalents to allow the execution
  of guest programs that might be too recent compared to the host
  system.

* Use the mixed-mode mechanism to run QEMU (instead of trigger/LD_PRELOAD)

* Allow one root per tracee, then add support for the chroot syscall
  under PRoot.

  It should make pacman (the Arch Linux package manager) happy.


Not yet scheduled
=================

Fixes
-----

* Emulate stat/getdents-like syscalls for "dummy" path that can't be created.

  It should fix this kind of scenario::

      host$ proot -m /etc:/does_not_exist/etc /
      proot warning: can't create the binding location "/does_not_exist/etc": [...]

      guest$ cd /does_not_exist/etc
      sh: cd: /does_not_exist/etc: No such file or directory

* Fix support for /proc/self when /proc isn't binded (but /proc/self is)

* Fix canonicalization of pathes that are expected to exist but doesn't.

    For instance ``ls /DOESNT_EXIST/../bin`` shouldn't succeed
    (reported by Yves JANIN).

* Fix the feature "attach on-the-fly"

* Fix support for runners that do execve()

* Add support for the string $ORIGIN (or equivalently ${ORIGIN}) in an rpath specification


Features
--------

* Add command-line interface to set environment variables.

    Rename push_env() in change_env() and enhance it to support the
    "unset" feature.

* Distinguish the runner mode ``-r/-R`` and QEMU specific modes ``-q/-Q``

* Add support for coalesced options, for instance ``proot -eM``

* Support guest ELF endianness different from the host one.

* Be more accurate on reported errno (TLPI 564-565, 572).

* Emulate ptrace() so as to allow a ptraced GDB on another ptraced process.

* Add two new options: --user-id & --group-id, and make -0 an alias to these options

* Allow a per-module verbose level


Documentation
-------------

* Explain what happens with unknown syscalls when using --allow-unknown-syscalls.

* Explain bindings aren't exclusive, i.e. "-b /tmp:/foo" doesn't invalidate "-b /tmp:/bar".


Clean-up
--------

* in event_loop(), replace::

      while (get_nb_tracees() > 0) {
          pid = waitpid(-1, &tracee_status, __WALL);
          if (pid < 0)
              notice(ERROR, SYSTEM, "waitpid()");
          ...
      }

  with::

      while (1) {
          pid = waitpid(-1, &tracee_status, __WALL);
          if (pid < 0)
              if (errno != ECHILD)
                  notice(ERROR, SYSTEM, "waitpid()");
              else
                  break;
          ...
      }
      assert(get_nb_tracees() == 0)

* Replace "readlink(XXX, path, PATH_MAX)" with "readlink(XXX, path, PATH_MAX - 1)"

* get_tracee_string should return -ENAMETOOLONG when length(XXX) >= max_size

* Add a testcase for each command-line options

* Add a test for bindinds that are prefixes of each other

    HOST$ proot -b /usr/local:/tmp/local -b /usr:/tmp/usr

    GUEST$ cd /tmp/usr/local/doc
    GUEST$ /usr/bin/pwd -P
    /tmp/usr/local/doc

    GUEST$ cd ..
    GUEST$ /usr/bin/pwd -P
    /tmp/usr/local/doc

    GUEST$ cd /tmp/local/doc
    GUEST$ /usr/bin/pwd -P
    /tmp/local/doc

    GUEST$ cd ..
    GUEST$ /usr/bin/pwd -P
    /tmp/local


Misc.
-----

* Explain why PRoot does not work with setuid programs

* Check (in ld.so sources) if more than one RPATH/RUNPATH entry is allowed.

* Why doesn't "slackpkg upgrade" work under PRoot v0.3

* Check the code coverage of PRoot


Completeness
------------

* Ensure tracees' clone flags has CLONE_PTRACE & ~CLONE_UNTRACED.

* Don't accept signal from tracees.

* Add a stealth mode where over-the-stack content is restored.

* Kill all tracees when exiting (on_exit/atexit).

* Don't exit() on error

* Use Valgrind, Coverity Prevent, and AddressSanitizer.

* Try Scrashme (syscall fuzzer) against PRoot


Performance
-----------

* Use one PTRACE_[GS]ETREGS instead of several PTRACE_P*K*USER.

* Use process_vm_read/write instead of /proc/<pid>/mem or PTRACE_P*K*DATA.

    * Fallback to /proc/<pid>/mem if these two syscalls aren't available.

* Don't move the stack pointer, use a pointer in the struct tracee_info

* Don't canonicalize if the path translation is delayed

    In translate_path(): we don't use the result of the
    canonicalization if the translation is delayed.  This point
    depends actually on the input path, so why I don't detect sooner
    that the canonicalization is useless?

* Add a "multi-process" mode where there's one fork of PRoot per monitored process.

    Each time a new_tracee structure is created, PRoot forks itself.
    Be sure that the tracer of this new process really is the new
    forked PRoot! (Thanks Yves for this comment)

* Use a cache for translation results

* Use a hash table to retrieve cached results + tracee's info
