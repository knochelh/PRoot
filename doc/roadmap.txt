=========
 Roadmap
=========

Short term
==========

* Handle /proc/<pid>/(cmdline|cwd|root) where <pid> is a process traced by
  PRoot (i.e not only "self").

  * for /proc/<pid>/cwd: the detranslation isn't a state machine,
    hence it doesn't know how to detranslate correctly when there are
    several bindings with the same host-side::

      $ proot -w /a -m /tmp:/a -m /tmp:/b ../tests/rootfs /bin/pwd
      /b

      $ proot -w /a -m /tmp:/b -m /tmp:/a ../tests/rootfs /bin/pwd
      /a

  * for /proc/<pid>/root: allow one root per tracee, then add support
    for the chroot syscall under PRoot.

* Emulate stat/getdents-like syscalls for "dummy" path that can't be created.

  It should fix this kind of scenario::

      host$ proot -m /etc:/does_not_exist/etc /
      proot warning: can't create the binding location "/does_not_exist/etc": [...]

      guest$ cd /does_not_exist/etc
      sh: cd: /does_not_exist/etc: No such file or directory

* A host program that launches a guest program shouldn't propagate its
  host LD_LIBRARY_PATH environment variable.


Middle term
===========

* Rewrite the way paths are handled in PRoot (branch "opath").

    * Remove the use of PATH_MAX and ARG_MAX

    * Remove most of string copy.

* Emulate *at syscalls with non-*at equivalents to allow the execution
  of guest programs that might be too recent compared to the host
  system.

* Add support for a special environment variable to add paths
  dynamically to the host LD_LIBRARY_PATH
  ("EXTRA_HOST_LD_LIBRARY_PATH").


Not yet scheduled
=================

Fixes
-----

* Fix the feature "attach on-the-fly"

* Fix support for runners that do execve()

* Add support for the string $ORIGIN (or equivalently ${ORIGIN}) in an rpath specification


Features
--------

* Add command-line interface to set environment variables.

    Rename push_env() in change_env() and enhance it to support the
    "unset" feature.

* Distinguish the runner mode ``-r/-R`` and QEMU specific modes ``-q/-Q``

* Add support for coalesced options, for instance ``proot -eM``

* Support guest ELF endianness different from the host one.

* Be more accurate on reported errno (TLPI 564-565, 572).

* Emulate ptrace() so as to allow a ptraced GDB on another ptraced process.

* Add two new options: --user-id & --group-id, and make -0 an alias to these options

* Allow a per-module verbose level


Documentation
-------------

* Explain what happens with unknown syscalls when using --allow-unknown-syscalls.

* Explain bindings aren't exclusive, i.e. "-b /tmp:/foo" doesn't invalidate "-b /tmp:/bar".


Clean-up
--------

* Replace "readlink(XXX, path, PATH_MAX)" with "readlink(XXX, path, PATH_MAX - 1)"

* get_tracee_string should return -ENAMETOOLONG when length(XXX) >= max_size

* Add a testcase for each command-line options


Misc.
-----

* Explain why PRoot does not work with setuid programs

* Check (in ld.so sources) if more than one RPATH/RUNPATH entry is allowed.

* Check the code coverage of PRoot


Completeness
------------

* Ensure tracees' clone flags has CLONE_PTRACE & ~CLONE_UNTRACED.

* Add a stealth mode where over-the-stack content is restored.

* Use Valgrind, Coverity Prevent, and AddressSanitizer.

* Try Scrashme (syscall fuzzer) against PRoot


Performance
-----------

* Use one PTRACE_[GS]ETREGS instead of several PTRACE_P*K*USER.

* Use process_vm_read/write instead of /proc/<pid>/mem or PTRACE_P*K*DATA.

    * Fallback to /proc/<pid>/mem if these two syscalls aren't available.

* Don't move the stack pointer, use a pointer in the struct tracee_info

* Don't canonicalize if the path translation is delayed

    In translate_path(): we don't use the result of the
    canonicalization if the translation is delayed.  This point
    depends actually on the input path, so why I don't detect sooner
    that the canonicalization is useless?

* Add a "multi-process" mode where there's one fork of PRoot per monitored process.

    Each time a new_tracee structure is created, PRoot forks itself.
    Be sure that the tracer of this new process really is the new
    forked PRoot! (Thanks Yves for this comment)

* Use a cache for translation results

* Use a hash table to retrieve cached results + tracee's info
